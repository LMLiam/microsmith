plugins {
    id 'org.jetbrains.kotlin.jvm' version '2.2.10' apply false
    id 'pl.allegro.tech.build.axion-release' version '1.21.0'
    id 'maven-publish'
    id 'io.kotest' version '6.0.1' apply false
}

scmVersion {
    tag {
        prefix = 'v'
    }
    checks {
        snapshotDependencies.set(false)
    }
    versionCreator 'versionWithBranch'
}

version = scmVersion.version

allprojects {
    group = 'me.liam'
    project.version = rootProject.version

    repositories {
        mavenCentral()
    }

    configurations.configureEach {
        resolutionStrategy.dependencySubstitution {
            substitute(module("me.liam:dsl")).using(project(":dsl"))
            substitute(module("me.liam:dsl-schemas")).using(project(":dsl-schemas"))
            substitute(module("me.liam:gen")).using(project(":gen"))
        }
    }
}

subprojects {
    apply plugin: 'org.jetbrains.kotlin.jvm'
    apply plugin: 'maven-publish'
    apply plugin: 'io.kotest'

    dependencies {
        testImplementation 'io.kotest:kotest-framework-engine:6.0.1'
        testImplementation 'io.kotest:kotest-assertions-core:6.0.1'
        testImplementation 'io.kotest:kotest-property:6.0.1'
        testImplementation 'io.kotest:kotest-extensions-junitxml:6.0.1'
    }

    tasks.withType(Test).configureEach {
        useJUnitPlatform()
        reports {
            junitXml.required.set(false)
        }
        systemProperty("gradle.build.dir", project.buildDir)
    }

    tasks.named("build") {
        dependsOn(tasks.named("kotest"))
    }

    tasks.named("test") {
        enabled = false
    }

    kotlin {
        jvmToolchain(24)
    }

    publishing {
        publications {
            gpr(MavenPublication) {
                from(components.java)
                groupId = project.group
                artifactId = project.name
                version = project.version
            }
        }
        repositories {
            maven {
                name = "GitHubPackages"
                url = uri("https://maven.pkg.github.com/lmliam/microsmith")
                credentials {
                    username = project.findProperty("gpr.user") ?: System.getenv("GITHUB_ACTOR")
                    password = project.findProperty("gpr.key") ?: System.getenv("GITHUB_TOKEN")
                }
            }
        }
    }
}